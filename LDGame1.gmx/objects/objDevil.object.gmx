<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDevilIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up internal variables

vxDelta = .6;
vyDelta = .6;

friction = 0.3;

gamepad_set_axis_deadzone(0, 0.10);

image_speed = 12/room_speed;

myScore = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move using wasd and controller 0's left stick

hspeed += gamepad_axis_value(0, gp_axislh) * vxDelta *2;
vspeed += gamepad_axis_value(0, gp_axislv) * vyDelta *2;

if (keyboard_check(ord("a")) || keyboard_check(ord("A")))
  hspeed += -vxDelta;
if (keyboard_check(ord("d")) || keyboard_check(ord("D")))
  hspeed += vxDelta;
if (keyboard_check(ord("w")) || keyboard_check(ord("W")))
  vspeed += -vyDelta;
if (keyboard_check(ord("s")) || keyboard_check(ord("S")))
  vspeed += vyDelta;

if(speed &gt; maxSpeed)
  speed = maxSpeed;
  
//Keep character on screen
if (x &lt; 32) {
    x = 32;
} else if (x &gt; room_width - 32) {
    x = room_width - 32;
}

if (y &lt; 32) {
    y = 32;
} else if (y &gt; room_height - 32) {
    y = room_height - 32;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update sprite based on player input (left/wasd)

var xAxisTotal = gamepad_axis_value(0, gp_axislh);
var yAxisTotal = gamepad_axis_value(0, gp_axislv);

  
if (keyboard_check(ord("a")) || keyboard_check(ord("A")))
  xAxisTotal += -1;
if (keyboard_check(ord("d")) || keyboard_check(ord("D")))
  xAxisTotal += 1;
if (keyboard_check(ord("w")) || keyboard_check(ord("W")))
  yAxisTotal += -1;
if (keyboard_check(ord("s")) || keyboard_check(ord("S")))
  yAxisTotal += 1;
  

var controlDir = point_direction(0, 0, xAxisTotal, yAxisTotal);
var controlSpeed = point_distance(0, 0, xAxisTotal, yAxisTotal);
controlDir = controlDir mod 360;

if(speed &lt; 2 &amp;&amp; controlSpeed &lt; 0.25){
  sprite_index = sprDevilIdle;
} else if(controlDir == 0){
  sprite_index = sprDevilRightDown;
} else if(controlDir &lt; 60){
  sprite_index = sprDevilRightUp;
} else if(controlDir &lt; 120){
  sprite_index = sprDevilUp;
} else if(controlDir &lt; 180){
  sprite_index = sprDevilLeftUp;
} else if(controlDir &lt; 240){
  sprite_index = sprDevilLeftDown;
} else if(controlDir &lt; 300){
  sprite_index = sprDevilDown;
} else if(controlDir &lt; 360){
  sprite_index = sprDevilRightDown;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSoul">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make soul go up on collision

show_debug_message("Devil collided with object " + string(other.id) + ".  Going down!");

if (other.soulDirection == up) { 

    if (other.connected != noone) {
        with (other.connected) {
            instance_destroy();
        }
    }

    var anvil = instance_create(other.x, other.y + 16, objAnvil);
        
    other.connected = anvil;
    
    with (other) {
        soulDirection = down;
        sprite_index = downSprite;
        bumps += 1;
        if (points &lt; maxPoints) {
            points = (3 * bumps * basePoints);
        }
        
        if(bumps &gt;= 2 &amp;&amp; multiplierIcon == noone) {
          var multiplierSprite = instance_create(other.x, other.y + 16, objSoulMultiplier);
          multiplierIcon = multiplierSprite;
        } 
        
        if(bumps == 2) {
          multiplierIcon.sprite_index = sprMult2x;
        } else if(bumps == 3) {
          multiplierIcon.sprite_index = sprMult3x;
        } else if(bumps == 4) {
          multiplierIcon.sprite_index = sprMult4x;
        } else if(bumps &gt;= 5) {
          multiplierIcon.sprite_index = sprMult5x;
        }
    }
    
    gamepad_set_vibration(0,0.3,0);
    alarm[0] = room_speed / 4; 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
