<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
selectedOption = optTime;

useGamePad = true;

switch (totalTime) {

    case (60):
        timeChoice.x = 450;
        break;
    
    case (120):
        timeChoice.x = 600;
        break;
    
    case (180):
        timeChoice.x = 750;
        break;
    
    case (500):
        timeChoice.x = 900;
        break;        
}

switch (maxPeople) {
        
    case (12):
        popChoice.x = 450;
        break;
    
    case (20):
        popChoice.x = 600;
        break;
    
    case (50):
        popChoice.x = 750;
        break;        
}        

switch (maxLife) {
        
    case (15):
        deathChoice.x = 450;
        break;
    
    case (10):
        deathChoice.x = 600;
        break;
    
    case (7):
        deathChoice.x = 750;
        break;        
}        

switch (pctWrong) {
        
    case (0.25):
        workChoice.x = 450;
        break;
    
    case (0.5):
        workChoice.x = 600;
        break;
    
    case (0.75):
        workChoice.x = 750;
        break;        
}


alarm[11] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up sliders

sfxSlider.curValue = sfxVolume;
musicSlider.curValue = musicVolume;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Raise music volume 
if (musicSlider.curValue == 0) {
    musicEmit = audio_emitter_create();
    audio_play_sound_on(musicEmit,musTitleScreen,true,10); 
}

if (musicSlider.curValue &lt; 1) {
    musicSlider.curValue += 0.05;
    musicVolume = (power(75,(musicSlider.curValue)) - 1)/74;   
    audio_emitter_gain(musicEmit, musicVolume);   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lower music volume 
if (musicSlider.curValue &gt; 0) {
    musicSlider.curValue -= 0.05;
    musicVolume = (power(75,(musicSlider.curValue)) - 1)/74;   
    audio_emitter_gain(musicEmit, musicVolume);    
}
if (musicSlider.curValue == 0) {
    audio_stop_sound(musTitleScreen);
    audio_emitter_free(musicEmit);
    musicEmit = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Raise SFX volume

if (sfxSlider.curValue == 0) {
    sfxEmit = audio_emitter_create();
}

if (sfxSlider.curValue &lt; 1) {
    sfxSlider.curValue += 0.05;
    sfxVolume = (power(75,(sfxSlider.curValue)) - 1)/74;   
    audio_emitter_gain(sfxEmit, sfxVolume);   
    audio_play_sound_on(sfxEmit,sndGoodCollected,false,50); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lower SFX volume 
if (sfxSlider.curValue &gt; 0) {
    sfxSlider.curValue -= 0.05;
    sfxVolume = (power(75,(sfxSlider.curValue)) - 1)/74;   
    audio_emitter_gain(sfxEmit, sfxVolume);    
    audio_play_sound_on(sfxEmit,sndGoodCollected,false,50);
}

if (sfxSlider.curValue == 0) {
    audio_emitter_free(sfxEmit);
    sfxEmit = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rmTitle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Options


if (selectedOption == optSFXVolume) {
    if (keyboard_check(vk_left)) {
        if (alarm[1] &lt;= 0) {
            alarm[1] = 0.25 * room_speed;
        }
    }
    if (keyboard_check(vk_right)) {
        if (alarm[2] &lt;= 0) {
            alarm[2] = 0.25 * room_speed;
        }
    }
    
    var gamePadNum = scrOuyaPlayerGamepad(1);
    hVal = gamepad_axis_value(gamePadNum, gp_axislh);
    vVal = gamepad_axis_value(gamePadNum, gp_axislv);
    if (useGamePad) {

    if (hVal &gt; 0.5 &amp;&amp; hVal &gt; vVal) {
        if (alarm[2] &lt;= 0) {
            alarm[2] = 0.25 * room_speed;
        }
    } else if (hVal &lt; -0.5 &amp;&amp; hVal &lt; vVal) {
        if (alarm[1] &lt;= 0) {
            alarm[1] = 0.25 * room_speed;
        }
    } else if (vVal &gt; 0.5 &amp;&amp; vVal &gt; hVal) {
        if (selectedOption != optMusicVolume) {
            optionChoice.y += 100;
            selectedOption += 1;
        }
        useGamePad = false;    
    } else if (vVal &lt; -0.5 &amp;&amp; vVal &lt; hVal) {
        if (selectedOption != optTime) {
            optionChoice.y -= 100;
            selectedOption -= 1;
        }
        useGamePad = false;    
    }

    } else {
        if (abs(hVal) &lt; 0.25 &amp;&amp; abs(vVal) &lt; 0.25){ 
            useGamePad = true;
        }
    }
                


} else if (selectedOption == optMusicVolume) {
    if (keyboard_check(vk_left)) {
        if (alarm[3] &lt;= 0) {
            alarm[3] = 0.25 * room_speed;
        }
    }
    if (keyboard_check(vk_right)) {
        if (alarm[4] &lt;= 0) {
            alarm[4] = 0.25 * room_speed;
        }
    }

        hVal = gamepad_axis_value(0, gp_axislh);
    vVal = gamepad_axis_value(0, gp_axislv);
    if (useGamePad) {

    if (hVal &gt; 0.5 &amp;&amp; hVal &gt; vVal) {
        if (alarm[4] &lt;= 0) {
            alarm[4] = 0.25 * room_speed;
        }
    } else if (hVal &lt; -0.5 &amp;&amp; hVal &lt; vVal) {
        if (alarm[3] &lt;= 0) {
            alarm[3] = 0.25 * room_speed;
        }
    } else if (vVal &gt; 0.5 &amp;&amp; vVal &gt; hVal) {
        if (selectedOption != optMusicVolume) {
            optionChoice.y += 100;
            selectedOption += 1;
        }
        useGamePad = false;    
    } else if (vVal &lt; -0.5 &amp;&amp; vVal &lt; hVal) {
        if (selectedOption != optTime) {
            optionChoice.y -= 100;
            selectedOption -= 1;
        }
        useGamePad = false;    
    }

    } else {
        if (abs(hVal) &lt; 0.25 &amp;&amp; abs(vVal) &lt; 0.25){ 
            useGamePad = true;
        }
    }

    
} else {
    var gamePadNum = scrOuyaPlayerGamepad(1);
    hVal = gamepad_axis_value(gamePadNum, gp_axislh);
    vVal = gamepad_axis_value(gamePadNum, gp_axislv);
    
    if (useGamePad) {
    
        if (hVal &gt; 0.5 &amp;&amp; hVal &gt; vVal) {
            var box = scrIncreaseOption(selectedOption);
            if (box != noone) {
                box.x += 150;
            }        
            useGamePad = false;
        } else if (hVal &lt; -0.5 &amp;&amp; hVal &lt; vVal) {
            var box = scrDecreaseOption(selectedOption);
            if (box != noone) {
                box.x -= 150;
            }
            useGamePad = false;    
        } else if (vVal &gt; 0.5 &amp;&amp; vVal &gt; hVal) {
            if (selectedOption != optMusicVolume) {
                optionChoice.y += 100;
                selectedOption += 1;
            }
            useGamePad = false;    
        } else if (vVal &lt; -0.5 &amp;&amp; vVal &lt; hVal) {
            if (selectedOption != optTime) {
                optionChoice.y -= 100;
                selectedOption -= 1;
            }
            useGamePad = false;    
        }
    
    } else {
        if (abs(hVal) &lt; 0.25 &amp;&amp; abs(vVal) &lt; 0.25){ 
            useGamePad = true;
        }
    }
}

///Check for gamepad button
var gamePadNum = scrOuyaPlayerGamepad(1);
if (scrCheckController(gamePadNum) == true)
{
   alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_colour(c_white);

draw_set_font(fntDifficulty);

draw_text(125, 100, "Number of Seconds");
draw_text(125, 200, "Maximum Population");
draw_text(125, 300, "Death Rate");
draw_text(125, 400, "Workload");
draw_text(125, 500, "SFX Volume");
draw_text(125, 550, "Music Volume");

draw_set_halign(fa_center);

draw_text(450, 100, "60");
draw_text(600, 100, "120");
draw_text(750, 100, "180");
draw_text(900, 100, "500");

draw_text(450, 200, "low");
draw_text(600, 200, "med");
draw_text(750, 200, "high");

draw_text(450, 300, "low");
draw_text(600, 300, "med");
draw_text(750, 300, "high");

draw_text(450, 400, "low");
draw_text(600, 400, "med");
draw_text(750, 400, "high");


draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Next Option

if (selectedOption != optMusicVolume) {
    optionChoice.y += 100;
    selectedOption += 1;
}

/*
switch (selectedOption) {
    case (optTime): 
        selectedOption = optPop;
        break;
    
    case (optPop):
        selectedOption = optDeath;
        break;
        
    case (optDeath):
        selectedOption = optWorkload;
        break;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select next choice

if ((selectedOption != optSFXVolume) &amp;&amp; (selectedOption != optMusicVolume)) {
    var box = scrIncreaseOption(selectedOption);
    
    if (box != noone) {
        box.x += 150;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Previous Option

if (selectedOption != optTime) {
    optionChoice.y -= 100;
    selectedOption -= 1;
}

/*

switch (selectedOption) {
    
    case (optPop):
        selectedOption = optTime;
        break;
        
    case (optDeath):
        selectedOption = optDeath;
        break;
    
    case (optWorkload):
        selectedOption = optDeath;
        break;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select previous choice


if ((selectedOption != optSFXVolume) &amp;&amp; (selectedOption != optMusicVolume)) {
    var box = scrDecreaseOption(selectedOption);
    
    
    if (box != noone) {
        box.x -= 150;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for start button

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for start button

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
