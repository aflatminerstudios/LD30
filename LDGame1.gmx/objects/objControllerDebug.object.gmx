<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create member variables

showStatusOnScreen = false; // Change this if you do/don't want to see the status

gamePadName = "Gamepad 1"

operatingSystem = "Unknown"
if(os_type == os_windows)
  operatingSystem = "Windows"
else if(os_type == os_android)
  operatingSystem = "Android"

gamePad1Status = "";
keyboardStatus = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get gamepad 1 values

var gamePadNum = scrOuyaPlayerGamepad(1);

var leftHorizontal = string(gamepad_axis_value(gamePadNum, gp_axislh));
var leftVertical = string(gamepad_axis_value(gamePadNum, gp_axislv));
var rightHorizontal = string(gamepad_axis_value(gamePadNum, gp_axisrh));
var rightVertical = string(gamepad_axis_value(gamePadNum, gp_axisrv));

gamePad1Status = gamePadName + "#Left Axis: (" + leftHorizontal + ", " + leftVertical + ")";
gamePad1Status += "#Right Axis: (" + rightHorizontal + ", " + rightVertical + ")";


var buttonStatus = "";

if (gamepad_button_check(gamePadNum, gp_padu))
    buttonStatus += "Up";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_padd))
    buttonStatus += "Down";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_padl))
    buttonStatus += "Left";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_padr))
    buttonStatus += "Right";
else
    buttonStatus += "-";

if (gamepad_button_check(gamePadNum, gp_face1))
    buttonStatus += "1";
else
    buttonStatus += "-";

if (gamepad_button_check(gamePadNum, gp_face2))
    buttonStatus += "2";
else
    buttonStatus += "-";

if (gamepad_button_check(gamePadNum, gp_face3))
    buttonStatus += "3";
else
    buttonStatus += "-";

if (gamepad_button_check(gamePadNum, gp_face4))
    buttonStatus += "4";
else
    buttonStatus += "-";

if (gamepad_button_check(gamePadNum, gp_select))
    buttonStatus += "Select";
else
    buttonStatus += "-";

if (gamepad_button_check(gamePadNum, gp_start))
    buttonStatus += "Start";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_shoulderl))
    buttonStatus += "LB";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_shoulderr))
    buttonStatus += "RB";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_shoulderlb))
    buttonStatus += "LT";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_shoulderrb))
    buttonStatus += "RT";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_stickl))
    buttonStatus += "L3";
else
    buttonStatus += "-";
    
if (gamepad_button_check(gamePadNum, gp_stickr))
    buttonStatus += "R3";
else
    buttonStatus += "-";

gamePad1Status += "#" + buttonStatus;

/*
if (keyboard_check(ord("a")) || keyboard_check(ord("A")))
  hspeed += -vxDelta;
if (keyboard_check(ord("d")) || keyboard_check(ord("D")))
  hspeed += vxDelta;
if (keyboard_check(ord("w")) || keyboard_check(ord("W")))
  vspeed += -vyDelta;
if (keyboard_check(ord("s")) || keyboard_check(ord("S")))
  vspeed += vyDelta;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get keyboard status


keyboardStatus = "Keyboard";

keyboardStatus += "#Last Keypress: " + string(keyboard_lastkey);
keyboardStatus += "#Last Character: " + string(keyboard_lastchar);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw status on screen
if(showStatusOnScreen) {
  var fullStatus = gamePad1Status + "##" + keyboardStatus + "##OS Type: " + operatingSystem;
  draw_set_font(-1); // Use default font (-1)
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  draw_text_colour(x-1, y-1, fullStatus, c_white, c_white, c_white, c_white, 1);
  draw_text_colour(x+1, y+1, fullStatus, c_white, c_white, c_white, c_white, 1);
  draw_text_colour(x-1, y+1, fullStatus, c_white, c_white, c_white, c_white, 1);
  draw_text_colour(x+1, y-1, fullStatus, c_white, c_white, c_white, c_white, 1);
  draw_text_colour(x, y, fullStatus, c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
