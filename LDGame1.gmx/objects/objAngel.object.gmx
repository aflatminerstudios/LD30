<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAngelIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up internal variables

vxDelta = .6;
vyDelta = .6;

friction = 0.3;

image_speed = 12/room_speed;

var gamePadNum = scrOuyaPlayerGamepad(1);
gamepad_set_axis_deadzone(gamePadNum, 0.10);

myScore = 0;

trailFreq = room_speed/12; // room_speed/X = X per second
trailTTL = 0.40*room_speed; // X*room_speed = X seconds for each frame to last


alarm[0] = trailFreq;

frozen = false;

speedMult = 1;
scoreMult = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unfreeze

frozen = false;

image_speed = 12/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create single trail sprite
var trailColor = choose(c_blue, c_aqua);
scrCreateTrailSprite(self, trailTTL, trailColor);
alarm[0] = trailFreq;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move using arrows and controller 0's right stick

var gamePadNum;
var hAxis;
var vAxis;


gamePadNum = scrOuyaPlayerGamepad(1);
hAxis = gp_axisrh;
vAxis = gp_axisrv;

hspeed += gamepad_axis_value(gamePadNum, hAxis) * vxDelta *2;
vspeed += gamepad_axis_value(gamePadNum, vAxis) * vyDelta *2;

if keyboard_check(vk_left)
  hspeed += -vxDelta;
if keyboard_check(vk_right)
  hspeed += vxDelta;
if keyboard_check(vk_up)
  vspeed += -vyDelta;
if keyboard_check(vk_down)
  vspeed += vyDelta;

if(speed &gt; maxSpeed * speedMult)
  speed = maxSpeed * speedMult;
  
if (frozen) {
    speed = 0;
    hspeed = 0;
    vspeed = 0;
}

//Keep character on screen
if (x &lt; 32) {
    x = 32;
} else if (x &gt; room_width - 32) {
    x = room_width - 32;
}

if (y &lt; 32) {
    y = 32;
} else if (y &gt; room_height - 32) {
    y = room_height - 32;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update sprite based on player input (gamepad/arrows)

if (!frozen) {
    
    var gamePadNum;
    var hAxis;
    var vAxis;
    
    gamePadNum = scrOuyaPlayerGamepad(1);
    hAxis = gp_axisrh;
    vAxis = gp_axisrv;

    
    var xAxisTotal = gamepad_axis_value(gamePadNum, hAxis);
    var yAxisTotal = gamepad_axis_value(gamePadNum, vAxis);
    
    if keyboard_check(vk_left)
      xAxisTotal += -1;
    if keyboard_check(vk_right)
      xAxisTotal += 1;
    if keyboard_check(vk_up)
      yAxisTotal += -1;
    if keyboard_check(vk_down)
      yAxisTotal += 1;
    
    
    var controlDir = point_direction(0, 0, xAxisTotal, yAxisTotal);
    var controlSpeed = point_distance(0, 0, xAxisTotal, yAxisTotal);
    controlDir = controlDir mod 360;
} else {
    speed = 0;
    var controlSpeed = 0;
}
if(speed &lt; 2 &amp;&amp; controlSpeed &lt; 0.25){
  sprite_index = sprAngelIdle;
} else if(controlDir == 0){
  sprite_index = sprAngelRightDown;
} else if(controlDir &lt; 60){
  sprite_index = sprAngelRightUp;
} else if(controlDir &lt; 120){
  sprite_index = sprAngelUp;
} else if(controlDir &lt; 180){
  sprite_index = sprAngelLeftUp;
} else if(controlDir &lt; 240){
  sprite_index = sprAngelLeftDown;
} else if(controlDir &lt; 300){
  sprite_index = sprAngelDown;
} else if(controlDir &lt; 360){
  sprite_index = sprAngelRightDown;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSoniaPowerup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stun player

frozen = true;

alarm[1] = freezeSeconds * room_speed;

image_speed = 0;

score -= 500 * multiplier;
myScore -= 500 * multiplier * scoreMult;

with (other) {
    alarm[3] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCherylPowerup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add to score and add vibration for powerup power

with(other) {
    alarm[0] = 1;
    alarm[3] = -1;
}

show_debug_message("Collided with powerup");

score += 1000 * multiplier;
myScore += 1000 * multiplier * scoreMult;

var whichSound = choose(sndPowerup1, sndPowerup2, sndPowerup3, sndPowerup4, sndPowerup5);

audio_play_sound_on(sfxEmit, whichSound, false, 75);

if (object_index == objAngel) {
    gamepad_set_vibration(0,0,0.5);
} else if (object_index == objDevil) {
    gamepad_set_vibration(0,0.5,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSoul">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make soul go up on collision

show_debug_message("Angel collided with object " + string(other.id) + ".  Going up!");

if (other.soulDirection == down) { 
    
    if (other.connected != noone) {
        with (other.connected) {
            instance_destroy();
        }
    }

    var balloon = instance_create(other.x, other.y - 16, objBalloons);
    
    other.connected = balloon;
    
    with (other) {
        soulDirection = up;
        sprite_index = upSprite;
        bumps += 1;        
        if (points &lt; maxPoints) {
            points = (3 * bumps * basePoints);
        }
        
        if(bumps &gt;= 2 &amp;&amp; multiplierIcon == noone) {
          var multiplierSprite = instance_create(other.x, other.y + 16, objSoulMultiplier);
          multiplierIcon = multiplierSprite;
        } 
        
        if(bumps == 2) {
          multiplierIcon.sprite_index = sprMult2x;
        } else if(bumps == 3) {
          multiplierIcon.sprite_index = sprMult3x;
        } else if(bumps == 4) {
          multiplierIcon.sprite_index = sprMult4x;
        } else if(bumps &gt;= 5) {
          multiplierIcon.sprite_index = sprMult5x;
        }
        
    }
    
    gamepad_set_vibration(0,0,0.3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

idleTime = 0;//1000;
if(idleTime &gt; 3*room_speed)
  draw_sprite_ext(sprRightStick, 0, x, y-50, 0.5, 0.5, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
